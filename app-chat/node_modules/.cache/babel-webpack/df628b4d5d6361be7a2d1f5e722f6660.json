{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n        /*\r\n         * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\r\n         * again.\r\n         */\n\n        const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n        if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n          const options = {\n            buffer: nativeAudioBufferSourceNode.buffer,\n            channelCount: nativeAudioBufferSourceNode.channelCount,\n            channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n            channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n            // Bug #149: Safari does not yet support the detune AudioParam.\n            loop: nativeAudioBufferSourceNode.loop,\n            loopEnd: nativeAudioBufferSourceNode.loopEnd,\n            loopStart: nativeAudioBufferSourceNode.loopStart,\n            playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n          };\n          nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeAudioBufferSourceNode.start(...start);\n          }\n\n          if (stop !== null) {\n            nativeAudioBufferSourceNode.stop(stop);\n          }\n        }\n\n        renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n        if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          yield renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n        } else {\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);\n        return nativeAudioBufferSourceNode;\n      });\n\n      return function createAudioBufferSourceNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}