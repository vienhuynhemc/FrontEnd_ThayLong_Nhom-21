{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n\n    const createAnalyserNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n        if (!nativeAnalyserNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeAnalyserNode.channelCount,\n            channelCountMode: nativeAnalyserNode.channelCountMode,\n            channelInterpretation: nativeAnalyserNode.channelInterpretation,\n            fftSize: nativeAnalyserNode.fftSize,\n            maxDecibels: nativeAnalyserNode.maxDecibels,\n            minDecibels: nativeAnalyserNode.minDecibels,\n            smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n          };\n          nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);\n        return nativeAnalyserNode;\n      });\n\n      return function createAnalyserNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=analyser-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}