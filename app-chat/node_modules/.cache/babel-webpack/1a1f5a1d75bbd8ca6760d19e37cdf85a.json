{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n        if (!nativeAudioNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeAudioNode.channelCount,\n            channelCountMode: nativeAudioNode.channelCountMode,\n            channelInterpretation: nativeAudioNode.channelInterpretation,\n            numberOfInputs: nativeAudioNode.numberOfInputs\n          };\n          nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n        return nativeAudioNode;\n      });\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=channel-merger-node-renderer-factory.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js"],"names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","trace","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,sCAAsC,GAAG,CAACC,6BAAD,EAAgCC,kBAAhC,EAAoDC,uBAApD,KAAgF;AAClI,SAAO,MAAM;AACT,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AACvE,YAAIC,eAAe,GAAGR,kBAAkB,CAACK,KAAD,CAAxC,CADuE,CAEvE;;AACA,cAAMI,+BAA+B,GAAGZ,gBAAgB,CAACW,eAAD,EAAkBF,yBAAlB,CAAxD;;AACA,YAAI,CAACG,+BAAL,EAAsC;AAClC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,YAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,YAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,YAAAA,cAAc,EAAEN,eAAe,CAACM;AAJpB,WAAhB;AAMAN,UAAAA,eAAe,GAAGT,6BAA6B,CAACO,yBAAD,EAA4BI,OAA5B,CAA/C;AACH;;AACDR,QAAAA,wBAAwB,CAACa,GAAzB,CAA6BT,yBAA7B,EAAwDE,eAAxD;AACA,cAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CAA7B;AACA,eAAOC,eAAP;AACH,OAhBoB;;AAAA,sBAAfJ,eAAe;AAAA;AAAA;AAAA,OAArB;;AAiBA,WAAO;AACHY,MAAAA,MAAM,CAACX,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMU,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BZ,yBAA7B,CAAhC;;AACA,YAAIW,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOb,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;;AAPE,KAAP;AASH,GA5BD;AA6BH,CA9BM,C,CA+BP","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeAudioNodes = new WeakMap();\r\n        const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeAudioNode = getNativeAudioNode(proxy);\r\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\r\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\r\n            if (!nativeAudioNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeAudioNode.channelCount,\r\n                    channelCountMode: nativeAudioNode.channelCountMode,\r\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\r\n                    numberOfInputs: nativeAudioNode.numberOfInputs\r\n                };\r\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\r\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\r\n            return nativeAudioNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeAudioNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeAudioNode);\r\n                }\r\n                return createAudioNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=channel-merger-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}