{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeOscillatorNode.channelCount,\n            channelCountMode: nativeOscillatorNode.channelCountMode,\n            channelInterpretation: nativeOscillatorNode.channelInterpretation,\n            detune: nativeOscillatorNode.detune.value,\n            frequency: nativeOscillatorNode.frequency.value,\n            periodicWave: periodicWave === null ? undefined : periodicWave,\n            type: nativeOscillatorNode.type\n          };\n          nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeOscillatorNode.start(start);\n          }\n\n          if (stop !== null) {\n            nativeOscillatorNode.stop(stop);\n          }\n        }\n\n        renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n        return nativeOscillatorNode;\n      });\n\n      return function createOscillatorNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=oscillator-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}