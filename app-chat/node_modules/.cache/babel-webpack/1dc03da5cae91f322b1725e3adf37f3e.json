{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n\n    const createConstantSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeConstantSourceNode = getNativeAudioNode(proxy);\n        /*\r\n         * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\r\n         * again.\r\n         */\n\n        const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n        if (!nativeConstantSourceNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeConstantSourceNode.channelCount,\n            channelCountMode: nativeConstantSourceNode.channelCountMode,\n            channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n            offset: nativeConstantSourceNode.offset.value\n          };\n          nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeConstantSourceNode.start(start);\n          }\n\n          if (stop !== null) {\n            nativeConstantSourceNode.stop(stop);\n          }\n        }\n\n        renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n        if (!nativeConstantSourceNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\n        return nativeConstantSourceNode;\n      });\n\n      return function createConstantSourceNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=constant-source-node-renderer-factory.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js"],"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","trace","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,uCAAuC,GAAG,CAACC,iBAAD,EAAoBC,8BAApB,EAAoDC,kBAApD,EAAwEC,gBAAxE,EAA0FC,uBAA1F,KAAsH;AACzK,SAAO,MAAM;AACT,UAAMC,iCAAiC,GAAG,IAAIC,OAAJ,EAA1C;AACA,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,UAAMC,wBAAwB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AAChF,YAAIC,wBAAwB,GAAGX,kBAAkB,CAACQ,KAAD,CAAjD;AACA;AACZ;AACA;AACA;;AACY,cAAMI,wCAAwC,GAAGhB,gBAAgB,CAACe,wBAAD,EAA2BF,yBAA3B,CAAjE;;AACA,YAAI,CAACG,wCAAL,EAA+C;AAC3C,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,wBAAwB,CAACG,YAD3B;AAEZC,YAAAA,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAF/B;AAGZC,YAAAA,qBAAqB,EAAEL,wBAAwB,CAACK,qBAHpC;AAIZC,YAAAA,MAAM,EAAEN,wBAAwB,CAACM,MAAzB,CAAgCC;AAJ5B,WAAhB;AAMAP,UAAAA,wBAAwB,GAAGZ,8BAA8B,CAACU,yBAAD,EAA4BI,OAA5B,CAAzD;;AACA,cAAIR,KAAK,KAAK,IAAd,EAAoB;AAChBM,YAAAA,wBAAwB,CAACN,KAAzB,CAA+BA,KAA/B;AACH;;AACD,cAAIC,IAAI,KAAK,IAAb,EAAmB;AACfK,YAAAA,wBAAwB,CAACL,IAAzB,CAA8BA,IAA9B;AACH;AACJ;;AACDH,QAAAA,iCAAiC,CAACgB,GAAlC,CAAsCV,yBAAtC,EAAiEE,wBAAjE;;AACA,YAAI,CAACC,wCAAL,EAA+C;AAC3C,gBAAMX,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMZ,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACS,MAAlC,EAA0CN,wBAAwB,CAACM,MAAnE,EAA2EP,KAA3E,CAAvB;AACH;;AACD,cAAMR,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCE,wBAAnC,EAA6DD,KAA7D,CAA7B;AACA,eAAOC,wBAAP;AACH,OA/B6B;;AAAA,sBAAxBJ,wBAAwB;AAAA;AAAA;AAAA,OAA9B;;AAgCA,WAAO;AACH,UAAIF,KAAJ,CAAUa,KAAV,EAAiB;AACbb,QAAAA,KAAK,GAAGa,KAAR;AACH,OAHE;;AAIH,UAAIZ,IAAJ,CAASY,KAAT,EAAgB;AACZZ,QAAAA,IAAI,GAAGY,KAAP;AACH,OANE;;AAOHE,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMW,gCAAgC,GAAGlB,iCAAiC,CAACmB,GAAlC,CAAsCb,yBAAtC,CAAzC;;AACA,YAAIY,gCAAgC,KAAKE,SAAzC,EAAoD;AAChD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,gCAAhB,CAAP;AACH;;AACD,eAAOd,wBAAwB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA/B;AACH;;AAbE,KAAP;AAeH,GAnDD;AAoDH,CArDM,C,CAsDP","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeConstantSourceNodes = new WeakMap();\r\n        let start = null;\r\n        let stop = null;\r\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\r\n            /*\r\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\r\n             * again.\r\n             */\r\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\r\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeConstantSourceNode.channelCount,\r\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\r\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\r\n                    offset: nativeConstantSourceNode.offset.value\r\n                };\r\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\r\n                if (start !== null) {\r\n                    nativeConstantSourceNode.start(start);\r\n                }\r\n                if (stop !== null) {\r\n                    nativeConstantSourceNode.stop(stop);\r\n                }\r\n            }\r\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\r\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\r\n            }\r\n            else {\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);\r\n            }\r\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);\r\n            return nativeConstantSourceNode;\r\n        };\r\n        return {\r\n            set start(value) {\r\n                start = value;\r\n            },\r\n            set stop(value) {\r\n                stop = value;\r\n            },\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeConstantSourceNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeConstantSourceNode);\r\n                }\r\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=constant-source-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}