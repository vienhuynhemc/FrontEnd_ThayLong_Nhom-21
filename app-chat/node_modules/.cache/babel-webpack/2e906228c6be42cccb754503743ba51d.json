{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n\n    const createWaveShaperNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n        if (!nativeWaveShaperNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeWaveShaperNode.channelCount,\n            channelCountMode: nativeWaveShaperNode.channelCountMode,\n            channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n            curve: nativeWaveShaperNode.curve,\n            oversample: nativeWaveShaperNode.oversample\n          };\n          nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n        if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\n        }\n\n        return nativeWaveShaperNode;\n      });\n\n      return function createWaveShaperNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=wave-shaper-node-renderer-factory.js.map","map":{"version":3,"sources":["E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","trace","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,mCAAmC,GAAG,CAACC,0BAAD,EAA6BC,kBAA7B,EAAiDC,uBAAjD,KAA6E;AAC5H,SAAO,MAAM;AACT,UAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;AACA,UAAMC,oBAAoB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AAC5E,YAAIC,oBAAoB,GAAGR,kBAAkB,CAACK,KAAD,CAA7C,CAD4E,CAE5E;;AACA,cAAMI,oCAAoC,GAAGZ,gBAAgB,CAACW,oBAAD,EAAuBF,yBAAvB,CAA7D;;AACA,YAAI,CAACG,oCAAL,EAA2C;AACvC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,YAAAA,gBAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,YAAAA,qBAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,YAAAA,KAAK,EAAEN,oBAAoB,CAACM,KAJhB;AAKZC,YAAAA,UAAU,EAAEP,oBAAoB,CAACO;AALrB,WAAhB;AAOAP,UAAAA,oBAAoB,GAAGT,0BAA0B,CAACO,yBAAD,EAA4BI,OAA5B,CAAjD;AACH;;AACDR,QAAAA,6BAA6B,CAACc,GAA9B,CAAkCV,yBAAlC,EAA6DE,oBAA7D;;AACA,YAAIZ,sBAAsB,CAACY,oBAAD,CAA1B,EAAkD;AAC9C,gBAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,EAAmEV,KAAnE,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,oBAAnC,EAAyDD,KAAzD,CAA7B;AACH;;AACD,eAAOC,oBAAP;AACH,OAtByB;;AAAA,sBAApBJ,oBAAoB;AAAA;AAAA;AAAA,OAA1B;;AAuBA,WAAO;AACHc,MAAAA,MAAM,CAACb,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMY,4BAA4B,GAAGjB,6BAA6B,CAACkB,GAA9B,CAAkCd,yBAAlC,CAArC;;AACA,YAAIa,4BAA4B,KAAKE,SAArC,EAAgD;AAC5C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;AACH;;AACD,eAAOf,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA3B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM,C,CAqCP","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\r\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeWaveShaperNodes = new WeakMap();\r\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\r\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\r\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\r\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeWaveShaperNode.channelCount,\r\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\r\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\r\n                    curve: nativeWaveShaperNode.curve,\r\n                    oversample: nativeWaveShaperNode.oversample\r\n                };\r\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\r\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);\r\n            }\r\n            else {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);\r\n            }\r\n            return nativeWaveShaperNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeWaveShaperNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeWaveShaperNode);\r\n                }\r\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=wave-shaper-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}