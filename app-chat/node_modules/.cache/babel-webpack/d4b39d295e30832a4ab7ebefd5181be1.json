{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeDelayNode.channelCount,\n            channelCountMode: nativeDelayNode.channelCountMode,\n            channelInterpretation: nativeDelayNode.channelInterpretation,\n            delayTime: nativeDelayNode.delayTime.value,\n            maxDelayTime\n          };\n          nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n        return nativeDelayNode;\n      });\n\n      return function createDelayNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=delay-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}