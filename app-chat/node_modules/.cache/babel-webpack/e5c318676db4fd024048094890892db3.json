{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n        if (!nativeConvolverNodeIsOwnedByContext) {\n          const options = {\n            buffer: nativeConvolverNode.buffer,\n            channelCount: nativeConvolverNode.channelCount,\n            channelCountMode: nativeConvolverNode.channelCountMode,\n            channelInterpretation: nativeConvolverNode.channelInterpretation,\n            disableNormalization: !nativeConvolverNode.normalize\n          };\n          nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n        if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n        }\n\n        return nativeConvolverNode;\n      });\n\n      return function createConvolverNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=convolver-node-renderer-factory.js.map","map":{"version":3,"sources":["E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","trace","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,kCAAkC,GAAG,CAACC,yBAAD,EAA4BC,kBAA5B,EAAgDC,uBAAhD,KAA4E;AAC1H,SAAO,MAAM;AACT,UAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;AACA,UAAMC,mBAAmB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AAC3E,YAAIC,mBAAmB,GAAGR,kBAAkB,CAACK,KAAD,CAA5C,CAD2E,CAE3E;;AACA,cAAMI,mCAAmC,GAAGZ,gBAAgB,CAACW,mBAAD,EAAsBF,yBAAtB,CAA5D;;AACA,YAAI,CAACG,mCAAL,EAA0C;AACtC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,MAAM,EAAEH,mBAAmB,CAACG,MADhB;AAEZC,YAAAA,YAAY,EAAEJ,mBAAmB,CAACI,YAFtB;AAGZC,YAAAA,gBAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;AAIZC,YAAAA,qBAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;AAKZC,YAAAA,oBAAoB,EAAE,CAACP,mBAAmB,CAACQ;AAL/B,WAAhB;AAOAR,UAAAA,mBAAmB,GAAGT,yBAAyB,CAACO,yBAAD,EAA4BI,OAA5B,CAA/C;AACH;;AACDR,QAAAA,4BAA4B,CAACe,GAA7B,CAAiCX,yBAAjC,EAA4DE,mBAA5D;;AACA,YAAIZ,sBAAsB,CAACY,mBAAD,CAA1B,EAAiD;AAC7C,gBAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,EAAkEX,KAAlE,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,mBAAnC,EAAwDD,KAAxD,CAA7B;AACH;;AACD,eAAOC,mBAAP;AACH,OAtBwB;;AAAA,sBAAnBJ,mBAAmB;AAAA;AAAA;AAAA,OAAzB;;AAuBA,WAAO;AACHe,MAAAA,MAAM,CAACd,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMa,2BAA2B,GAAGlB,4BAA4B,CAACmB,GAA7B,CAAiCf,yBAAjC,CAApC;;AACA,YAAIc,2BAA2B,KAAKE,SAApC,EAA+C;AAC3C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;AACH;;AACD,eAAOhB,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA1B;AACH;;AAPE,KAAP;AASH,GAlCD;AAmCH,CApCM,C,CAqCP","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\r\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeConvolverNodes = new WeakMap();\r\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeConvolverNode = getNativeAudioNode(proxy);\r\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\r\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\r\n            if (!nativeConvolverNodeIsOwnedByContext) {\r\n                const options = {\r\n                    buffer: nativeConvolverNode.buffer,\r\n                    channelCount: nativeConvolverNode.channelCount,\r\n                    channelCountMode: nativeConvolverNode.channelCountMode,\r\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\r\n                    disableNormalization: !nativeConvolverNode.normalize\r\n                };\r\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\r\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\r\n            }\r\n            else {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\r\n            }\r\n            return nativeConvolverNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeConvolverNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeConvolverNode);\r\n                }\r\n                return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=convolver-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}