{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n\n    const createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n        if (!nativeAudioNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeAudioNode.channelCount,\n            channelCountMode: nativeAudioNode.channelCountMode,\n            channelInterpretation: nativeAudioNode.channelInterpretation,\n            numberOfOutputs: nativeAudioNode.numberOfOutputs\n          };\n          nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);\n        return nativeAudioNode;\n      });\n\n      return function createAudioNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=channel-splitter-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}