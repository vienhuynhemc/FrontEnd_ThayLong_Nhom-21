{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n\n    const createBiquadFilterNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n        /*\r\n         * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\r\n         * again.\r\n         */\n\n        const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n        if (!nativeBiquadFilterNodeIsOwnedByContext) {\n          const options = {\n            Q: nativeBiquadFilterNode.Q.value,\n            channelCount: nativeBiquadFilterNode.channelCount,\n            channelCountMode: nativeBiquadFilterNode.channelCountMode,\n            channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n            detune: nativeBiquadFilterNode.detune.value,\n            frequency: nativeBiquadFilterNode.frequency.value,\n            gain: nativeBiquadFilterNode.gain.value,\n            type: nativeBiquadFilterNode.type\n          };\n          nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n        if (!nativeBiquadFilterNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\n        return nativeBiquadFilterNode;\n      });\n\n      return function createBiquadFilterNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=biquad-filter-node-renderer-factory.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js"],"names":["isOwnedByContext","createBiquadFilterNodeRendererFactory","connectAudioParam","createNativeBiquadFilterNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeBiquadFilterNodes","WeakMap","createBiquadFilterNode","proxy","nativeOfflineAudioContext","trace","nativeBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","options","Q","value","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","set","render","renderedNativeBiquadFilterNode","get","undefined","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeBiquadFilterNodes = new WeakMap();\r\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\r\n            /*\r\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\r\n             * again.\r\n             */\r\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\r\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\r\n                const options = {\r\n                    Q: nativeBiquadFilterNode.Q.value,\r\n                    channelCount: nativeBiquadFilterNode.channelCount,\r\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\r\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\r\n                    detune: nativeBiquadFilterNode.detune.value,\r\n                    frequency: nativeBiquadFilterNode.frequency.value,\r\n                    gain: nativeBiquadFilterNode.gain.value,\r\n                    type: nativeBiquadFilterNode.type\r\n                };\r\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\r\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\r\n            }\r\n            else {\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);\r\n            }\r\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);\r\n            return nativeBiquadFilterNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeBiquadFilterNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\r\n                }\r\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}