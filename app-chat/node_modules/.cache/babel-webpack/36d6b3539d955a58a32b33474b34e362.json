{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderIds = new Set();\nexport const wrap = createBroker({\n  encode: ({\n    call\n  }) => {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (encoderId, timeslice) {\n        const arrayBuffers = yield call('encode', {\n          encoderId,\n          timeslice\n        });\n        encoderIds.delete(encoderId);\n        return arrayBuffers;\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  },\n  instantiate: ({\n    call\n  }) => {\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (mimeType, sampleRate) {\n        const encoderId = addUniqueNumber(encoderIds);\n        const port = yield call('instantiate', {\n          encoderId,\n          mimeType,\n          sampleRate\n        });\n        return {\n          encoderId,\n          port\n        };\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  register: ({\n    call\n  }) => {\n    return port => {\n      return call('register', {\n        port\n      }, [port]);\n    };\n  }\n});\nexport const load = url => {\n  const worker = new Worker(url);\n  return wrap(worker);\n}; //# sourceMappingURL=module.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/media-encoder-host-broker/build/es2019/module.js"],"names":["createBroker","addUniqueNumber","encoderIds","Set","wrap","encode","call","encoderId","timeslice","arrayBuffers","delete","instantiate","mimeType","sampleRate","port","register","load","url","worker","Worker"],"mappings":";AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA;AACA;AACA;AACA;;AACA,cAAc,oBAAd;AACA,cAAc,eAAd;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,OAAO,MAAMC,IAAI,GAAGJ,YAAY,CAAC;AAC7BK,EAAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAClB;AAAA,mCAAO,WAAOC,SAAP,EAAkBC,SAAlB,EAAgC;AACnC,cAAMC,YAAY,SAASH,IAAI,CAAC,QAAD,EAAW;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb,SAAX,CAA/B;AACAN,QAAAA,UAAU,CAACQ,MAAX,CAAkBH,SAAlB;AACA,eAAOE,YAAP;AACH,OAJD;;AAAA;AAAA;AAAA;AAAA;AAKH,GAP4B;AAQ7BE,EAAAA,WAAW,EAAE,CAAC;AAAEL,IAAAA;AAAF,GAAD,KAAc;AACvB;AAAA,oCAAO,WAAOM,QAAP,EAAiBC,UAAjB,EAAgC;AACnC,cAAMN,SAAS,GAAGN,eAAe,CAACC,UAAD,CAAjC;AACA,cAAMY,IAAI,SAASR,IAAI,CAAC,aAAD,EAAgB;AAAEC,UAAAA,SAAF;AAAaK,UAAAA,QAAb;AAAuBC,UAAAA;AAAvB,SAAhB,CAAvB;AACA,eAAO;AAAEN,UAAAA,SAAF;AAAaO,UAAAA;AAAb,SAAP;AACH,OAJD;;AAAA;AAAA;AAAA;AAAA;AAKH,GAd4B;AAe7BC,EAAAA,QAAQ,EAAE,CAAC;AAAET,IAAAA;AAAF,GAAD,KAAc;AACpB,WAAQQ,IAAD,IAAU;AACb,aAAOR,IAAI,CAAC,UAAD,EAAa;AAAEQ,QAAAA;AAAF,OAAb,EAAuB,CAACA,IAAD,CAAvB,CAAX;AACH,KAFD;AAGH;AAnB4B,CAAD,CAAzB;AAqBP,OAAO,MAAME,IAAI,GAAIC,GAAD,IAAS;AACzB,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWF,GAAX,CAAf;AACA,SAAOb,IAAI,CAACc,MAAD,CAAX;AACH,CAHM,C,CAIP","sourcesContent":["import { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderIds = new Set();\nexport const wrap = createBroker({\n    encode: ({ call }) => {\n        return async (encoderId, timeslice) => {\n            const arrayBuffers = await call('encode', { encoderId, timeslice });\n            encoderIds.delete(encoderId);\n            return arrayBuffers;\n        };\n    },\n    instantiate: ({ call }) => {\n        return async (mimeType, sampleRate) => {\n            const encoderId = addUniqueNumber(encoderIds);\n            const port = await call('instantiate', { encoderId, mimeType, sampleRate });\n            return { encoderId, port };\n        };\n    },\n    register: ({ call }) => {\n        return (port) => {\n            return call('register', { port }, [port]);\n        };\n    }\n});\nexport const load = (url) => {\n    const worker = new Worker(url);\n    return wrap(worker);\n};\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}