{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeStereoPannerNode = getNativeAudioNode(proxy);\n        /*\r\n         * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\r\n         * again.\r\n         */\n\n        const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeStereoPannerNode.channelCount,\n            channelCountMode: nativeStereoPannerNode.channelCountMode,\n            channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n            pan: nativeStereoPannerNode.pan.value\n          };\n          nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n        }\n\n        if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n        }\n\n        return nativeStereoPannerNode;\n      });\n\n      return function createStereoPannerNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=stereo-panner-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}