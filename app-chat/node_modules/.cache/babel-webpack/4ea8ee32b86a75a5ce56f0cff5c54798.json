{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n\n    const createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n        if (!nativeConvolverNodeIsOwnedByContext) {\n          const options = {\n            buffer: nativeConvolverNode.buffer,\n            channelCount: nativeConvolverNode.channelCount,\n            channelCountMode: nativeConvolverNode.channelCountMode,\n            channelInterpretation: nativeConvolverNode.channelInterpretation,\n            disableNormalization: !nativeConvolverNode.normalize\n          };\n          nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n        if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);\n        }\n\n        return nativeConvolverNode;\n      });\n\n      return function createConvolverNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=convolver-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}