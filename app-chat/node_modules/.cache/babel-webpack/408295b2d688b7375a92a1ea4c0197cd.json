{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n\n    const createDelayNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeDelayNode.channelCount,\n            channelCountMode: nativeDelayNode.channelCountMode,\n            channelInterpretation: nativeDelayNode.channelInterpretation,\n            delayTime: nativeDelayNode.delayTime.value,\n            maxDelayTime\n          };\n          nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n        if (!nativeDelayNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\n        return nativeDelayNode;\n      });\n\n      return function createDelayNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n\n        return createDelayNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=delay-node-renderer-factory.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js"],"names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","trace","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,iBAAD,EAAoBC,qBAApB,EAA2CC,kBAA3C,EAA+DC,gBAA/D,EAAiFC,uBAAjF,KAA6G;AACvJ,SAAQC,YAAD,IAAkB;AACrB,UAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AACA,UAAMC,eAAe;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AACvE,YAAIC,eAAe,GAAGV,kBAAkB,CAACO,KAAD,CAAxC,CADuE,CAEvE;;AACA,cAAMI,+BAA+B,GAAGf,gBAAgB,CAACc,eAAD,EAAkBF,yBAAlB,CAAxD;;AACA,YAAI,CAACG,+BAAL,EAAsC;AAClC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,YAAAA,gBAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,YAAAA,qBAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,YAAAA,SAAS,EAAEN,eAAe,CAACM,SAAhB,CAA0BC,KAJzB;AAKZd,YAAAA;AALY,WAAhB;AAOAO,UAAAA,eAAe,GAAGX,qBAAqB,CAACS,yBAAD,EAA4BI,OAA5B,CAAvC;AACH;;AACDR,QAAAA,wBAAwB,CAACc,GAAzB,CAA6BV,yBAA7B,EAAwDE,eAAxD;;AACA,YAAI,CAACC,+BAAL,EAAsC;AAClC,gBAAMV,gBAAgB,CAACO,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMX,iBAAiB,CAACU,yBAAD,EAA4BD,KAAK,CAACS,SAAlC,EAA6CN,eAAe,CAACM,SAA7D,EAAwEP,KAAxE,CAAvB;AACH;;AACD,cAAMP,uBAAuB,CAACK,KAAD,EAAQC,yBAAR,EAAmCE,eAAnC,EAAoDD,KAApD,CAA7B;AACA,eAAOC,eAAP;AACH,OAvBoB;;AAAA,sBAAfJ,eAAe;AAAA;AAAA;AAAA,OAArB;;AAwBA,WAAO;AACHa,MAAAA,MAAM,CAACZ,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMW,uBAAuB,GAAGhB,wBAAwB,CAACiB,GAAzB,CAA6Bb,yBAA7B,CAAhC;;AACA,YAAIY,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AACD,eAAOd,eAAe,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAAtB;AACH;;AAPE,KAAP;AASH,GAnCD;AAoCH,CArCM,C,CAsCP","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\r\n    return (maxDelayTime) => {\r\n        const renderedNativeDelayNodes = new WeakMap();\r\n        const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeDelayNode = getNativeAudioNode(proxy);\r\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\r\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\r\n            if (!nativeDelayNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeDelayNode.channelCount,\r\n                    channelCountMode: nativeDelayNode.channelCountMode,\r\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\r\n                    delayTime: nativeDelayNode.delayTime.value,\r\n                    maxDelayTime\r\n                };\r\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\r\n            if (!nativeDelayNodeIsOwnedByContext) {\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\r\n            }\r\n            else {\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);\r\n            }\r\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);\r\n            return nativeDelayNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeDelayNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeDelayNode);\r\n                }\r\n                return createDelayNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=delay-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}