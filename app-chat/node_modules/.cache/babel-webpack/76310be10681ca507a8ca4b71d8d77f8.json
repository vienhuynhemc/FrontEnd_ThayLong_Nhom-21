{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) {\n      const audioParamConnections = getAudioParamConnections(audioParam);\n      yield Promise.all(Array.from(audioParamConnections.activeInputs).map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* ([source, output]) {\n          const audioNodeRenderer = getAudioNodeRenderer(source);\n          const renderedNativeAudioNode = yield audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n\n          if (!isPartOfACycle(source)) {\n            renderedNativeAudioNode.connect(nativeAudioParam, output);\n          }\n        });\n\n        return function (_x5) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    });\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //# sourceMappingURL=render-inputs-of-audio-param.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js"],"names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","trace","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","renderedNativeAudioNode","render","connect"],"mappings":";AAAA,OAAO,MAAMA,8BAA8B,GAAG,CAACC,oBAAD,EAAuBC,wBAAvB,EAAiDC,cAAjD,KAAoE;AAC9G;AAAA,iCAAO,WAAOC,UAAP,EAAmBC,yBAAnB,EAA8CC,gBAA9C,EAAgEC,KAAhE,EAA0E;AAC7E,YAAMC,qBAAqB,GAAGN,wBAAwB,CAACE,UAAD,CAAtD;AACA,YAAMK,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,IAAN,CAAWJ,qBAAqB,CAACK,YAAjC,EAA+CC,GAA/C;AAAA,sCAAmD,WAAO,CAACC,MAAD,EAASC,MAAT,CAAP,EAA4B;AAC7F,gBAAMC,iBAAiB,GAAGhB,oBAAoB,CAACc,MAAD,CAA9C;AACA,gBAAMG,uBAAuB,SAASD,iBAAiB,CAACE,MAAlB,CAAyBJ,MAAzB,EAAiCV,yBAAjC,EAA4DE,KAA5D,CAAtC;;AACA,cAAI,CAACJ,cAAc,CAACY,MAAD,CAAnB,EAA6B;AACzBG,YAAAA,uBAAuB,CAACE,OAAxB,CAAgCd,gBAAhC,EAAkDU,MAAlD;AACH;AACJ,SANiB;;AAAA;AAAA;AAAA;AAAA,UAAZ,CAAN;AAOH,KATD;;AAAA;AAAA;AAAA;AAAA;AAUH,CAXM,C,CAYP","sourcesContent":["export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=render-inputs-of-audio-param.js.map"]},"metadata":{},"sourceType":"module"}