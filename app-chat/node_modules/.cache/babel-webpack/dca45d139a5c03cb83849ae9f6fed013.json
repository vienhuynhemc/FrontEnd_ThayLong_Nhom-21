{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) {\n      const audioNodeConnections = getAudioNodeConnections(audioNode);\n      const nextTrace = [...trace, audioNode];\n      yield Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* ([source, output]) {\n          const audioNodeRenderer = getAudioNodeRenderer(source);\n          const renderedNativeAudioNode = yield audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n          const destination = audioNode.context.destination;\n\n          if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n            renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n          }\n        });\n\n        return function (_x5) {\n          return _ref2.apply(this, arguments);\n        };\n      }())).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    });\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //# sourceMappingURL=render-inputs-of-audio-node.js.map","map":{"version":3,"sources":["E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js"],"names":["createRenderInputsOfAudioNode","getAudioNodeConnections","getAudioNodeRenderer","isPartOfACycle","audioNode","nativeOfflineAudioContext","nativeAudioNode","trace","audioNodeConnections","nextTrace","Promise","all","activeInputs","map","connections","input","Array","from","filter","source","includes","output","audioNodeRenderer","renderedNativeAudioNode","render","destination","context","connect","reduce","allRenderingPromises","renderingPromises"],"mappings":";AAAA,OAAO,MAAMA,6BAA6B,GAAG,CAACC,uBAAD,EAA0BC,oBAA1B,EAAgDC,cAAhD,KAAmE;AAC5G;AAAA,iCAAO,WAAOC,SAAP,EAAkBC,yBAAlB,EAA6CC,eAA7C,EAA8DC,KAA9D,EAAwE;AAC3E,YAAMC,oBAAoB,GAAGP,uBAAuB,CAACG,SAAD,CAApD;AACA,YAAMK,SAAS,GAAG,CAAC,GAAGF,KAAJ,EAAWH,SAAX,CAAlB;AACA,YAAMM,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,YAArB,CACbC,GADa,CACT,CAACC,WAAD,EAAcC,KAAd,KAAwBC,KAAK,CAACC,IAAN,CAAWH,WAAX,EAC5BI,MAD4B,CACrB,CAAC,CAACC,MAAD,CAAD,KAAc,CAACV,SAAS,CAACW,QAAV,CAAmBD,MAAnB,CADM,EAE5BN,GAF4B;AAAA,sCAExB,WAAO,CAACM,MAAD,EAASE,MAAT,CAAP,EAA4B;AACjC,gBAAMC,iBAAiB,GAAGpB,oBAAoB,CAACiB,MAAD,CAA9C;AACA,gBAAMI,uBAAuB,SAASD,iBAAiB,CAACE,MAAlB,CAAyBL,MAAzB,EAAiCd,yBAAjC,EAA4DI,SAA5D,CAAtC;AACA,gBAAMgB,WAAW,GAAGrB,SAAS,CAACsB,OAAV,CAAkBD,WAAtC;;AACA,cAAI,CAACtB,cAAc,CAACgB,MAAD,CAAf,KAA4Bf,SAAS,KAAKqB,WAAd,IAA6B,CAACtB,cAAc,CAACC,SAAD,CAAxE,CAAJ,EAA0F;AACtFmB,YAAAA,uBAAuB,CAACI,OAAxB,CAAgCrB,eAAhC,EAAiDe,MAAjD,EAAyDN,KAAzD;AACH;AACJ,SATgC;;AAAA;AAAA;AAAA;AAAA,UADf,EAWba,MAXa,CAWN,CAACC,oBAAD,EAAuBC,iBAAvB,KAA6C,CAAC,GAAGD,oBAAJ,EAA0B,GAAGC,iBAA7B,CAXvC,EAWwF,EAXxF,CAAZ,CAAN;AAYH,KAfD;;AAAA;AAAA;AAAA;AAAA;AAgBH,CAjBM,C,CAkBP","sourcesContent":["export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\r\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {\r\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\r\n        const nextTrace = [...trace, audioNode];\r\n        await Promise.all(audioNodeConnections.activeInputs\r\n            .map((connections, input) => Array.from(connections)\r\n            .filter(([source]) => !nextTrace.includes(source))\r\n            .map(async ([source, output]) => {\r\n            const audioNodeRenderer = getAudioNodeRenderer(source);\r\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\r\n            const destination = audioNode.context.destination;\r\n            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\r\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\r\n            }\r\n        }))\r\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\r\n    };\r\n};\r\n//# sourceMappingURL=render-inputs-of-audio-node.js.map"]},"metadata":{},"sourceType":"module"}