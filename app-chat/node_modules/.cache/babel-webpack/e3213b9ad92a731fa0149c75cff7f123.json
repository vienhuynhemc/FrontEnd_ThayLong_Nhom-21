{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n\n    const createOscillatorNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeOscillatorNode.channelCount,\n            channelCountMode: nativeOscillatorNode.channelCountMode,\n            channelInterpretation: nativeOscillatorNode.channelInterpretation,\n            detune: nativeOscillatorNode.detune.value,\n            frequency: nativeOscillatorNode.frequency.value,\n            periodicWave: periodicWave === null ? undefined : periodicWave,\n            type: nativeOscillatorNode.type\n          };\n          nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n          if (start !== null) {\n            nativeOscillatorNode.start(start);\n          }\n\n          if (stop !== null) {\n            nativeOscillatorNode.stop(stop);\n          }\n        }\n\n        renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n        if (!nativeOscillatorNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n          yield renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\n        return nativeOscillatorNode;\n      });\n\n      return function createOscillatorNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n\n        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=oscillator-node-renderer-factory.js.map","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js"],"names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","trace","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"mappings":"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","sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeOscillatorNodes = new WeakMap();\r\n        let periodicWave = null;\r\n        let start = null;\r\n        let stop = null;\r\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\r\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\r\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\r\n            if (!nativeOscillatorNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeOscillatorNode.channelCount,\r\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\r\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\r\n                    detune: nativeOscillatorNode.detune.value,\r\n                    frequency: nativeOscillatorNode.frequency.value,\r\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\r\n                    type: nativeOscillatorNode.type\r\n                };\r\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\r\n                if (start !== null) {\r\n                    nativeOscillatorNode.start(start);\r\n                }\r\n                if (stop !== null) {\r\n                    nativeOscillatorNode.stop(stop);\r\n                }\r\n            }\r\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\r\n            if (!nativeOscillatorNodeIsOwnedByContext) {\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\r\n            }\r\n            else {\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);\r\n            }\r\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);\r\n            return nativeOscillatorNode;\r\n        };\r\n        return {\r\n            set periodicWave(value) {\r\n                periodicWave = value;\r\n            },\r\n            set start(value) {\r\n                start = value;\r\n            },\r\n            set stop(value) {\r\n                stop = value;\r\n            },\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeOscillatorNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeOscillatorNode);\r\n                }\r\n                return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=oscillator-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}