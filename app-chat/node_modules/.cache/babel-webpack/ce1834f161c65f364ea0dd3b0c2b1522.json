{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) {\n      const audioNodeConnections = getAudioNodeConnections(audioNode);\n      const nextTrace = [...trace, audioNode];\n      yield Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* ([source, output]) {\n          const audioNodeRenderer = getAudioNodeRenderer(source);\n          const renderedNativeAudioNode = yield audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);\n          const destination = audioNode.context.destination;\n\n          if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n            renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n          }\n        });\n\n        return function (_x5) {\n          return _ref2.apply(this, arguments);\n        };\n      }())).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    });\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; //# sourceMappingURL=render-inputs-of-audio-node.js.map","map":null,"metadata":{},"sourceType":"module"}