{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n\n    const createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n        const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n        if (!nativeGainNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeGainNode.channelCount,\n            channelCountMode: nativeGainNode.channelCountMode,\n            channelInterpretation: nativeGainNode.channelInterpretation,\n            gain: nativeGainNode.gain.value\n          };\n          nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n        if (!nativeGainNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);\n        }\n\n        yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);\n        return nativeGainNode;\n      });\n\n      return function createGainNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=gain-node-renderer-factory.js.map","map":null,"metadata":{},"sourceType":"module"}