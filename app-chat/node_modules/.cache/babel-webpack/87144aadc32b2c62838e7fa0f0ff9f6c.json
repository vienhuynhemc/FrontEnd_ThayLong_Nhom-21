{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Administrator/Desktop/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nimport * as i2 from \"./friends-page-web-socket/friends-page-web-socket.service\";\nexport class FriendsPageWsService {\n  constructor(db, friendsWS) {\n    this.db = db;\n    this.friendsWS = friendsWS;\n    this.source = new BehaviorSubject(-1);\n    this.friendsDefault = this.source.asObservable();\n    this.idUnfriend = '';\n    this.nameUnfriend = '';\n    this.searchVal = '';\n    this.searchValOffer = ''; // lottie\n\n    this.options = {\n      path: '/assets/json/lottie/loading.json'\n    };\n    this.update();\n  }\n\n  selectedFriendsPageDefaultSerivce() {\n    this.source.next(0);\n  }\n\n  selectedRequestService() {\n    this.source.next(1);\n  }\n\n  selectedSendService() {\n    this.source.next(2);\n  }\n\n  selectedAddFriendsService() {\n    this.source.next(3);\n  }\n\n  selectedOffersFriendsService() {\n    this.source.next(4);\n  }\n\n  isLoadingProcess() {\n    return this.isLoading;\n  }\n\n  setLoading(loading) {\n    this.isLoading = loading;\n  }\n\n  animationCreated(animationItem) {} // số lượng bạn bè\n\n\n  getSizeFriends() {\n    return this.sizeFriends;\n  }\n\n  setSizeFriends(size) {\n    this.sizeFriends = size;\n  } // id người bị hủy kết bạn\n\n\n  setIDUnFriend(id) {\n    this.idUnfriend = id;\n  }\n\n  getIDUnFriend() {\n    return this.idUnfriend;\n  } // tên người bị hủy kết bạn\n\n\n  setNameUnFriend(name) {\n    this.nameUnfriend = name;\n  }\n\n  getNameUnFriend() {\n    return this.nameUnfriend;\n  } // danh sách bạn bè\n\n\n  getFriendsList() {\n    return this.friendsList;\n  } // danh sách gửi yêu cầu\n\n\n  getRequestList() {\n    return this.requestList;\n  }\n\n  getSizeRequest() {\n    return this.sizeRequest;\n  }\n\n  setSizeRequest(size) {\n    this.sizeRequest = size;\n  } // danh sach gửi yêu cầu kết bạn\n\n\n  getSendsList() {\n    return this.sendstList;\n  }\n\n  getSizeSends() {\n    return this.sizeSends;\n  }\n\n  setSizeSends(size) {\n    this.sizeSends = size;\n  } // danh sách thêm bạn\n\n\n  setSizeAdd(size) {\n    this.sizeAdd = size;\n  }\n\n  getSizeAdd() {\n    return this.sizeAdd;\n  } // danh sách de xuat\n\n\n  setSizeOffer(size) {\n    this.sizeOffer = size;\n  }\n\n  getSizeOffer() {\n    return this.sizeOffer;\n  } // sắp xếp danh sách thêm bạn theo thứ tự bạn chung từ nhiều nhất đến ít nhất\n\n\n  sortMutualFriendsAdd() {\n    this.addList = this.addList.sort((mutual1, mutual2) => {\n      let mutualResult_1 = mutual1.mutualFriends;\n      let mutualResult_2 = mutual2.mutualFriends;\n      return mutualResult_2 - mutualResult_1;\n    });\n  } // sắp xếp danh sách thêm bạn theo thứ tự bạn chung từ nhiều nhất đến ít nhất\n\n\n  sortMutualFriendsOffer() {\n    this.offerList = this.offerList.sort((mutual1, mutual2) => {\n      let mutualResult_1 = mutual1.mutualFriends;\n      let mutualResult_2 = mutual2.mutualFriends;\n      return mutualResult_2 - mutualResult_1;\n    });\n  } // sort thời gian gửi lời mời kết bạn từ gần nhất đến xa nhất dùng trong lấy ra danh sách request\n\n\n  sortRequestListDate() {\n    this.requestList = this.requestList.sort((dateIn1, dateIn2) => {\n      let date_1 = dateIn1.dateRequest;\n      let date_2 = dateIn2.dateRequest;\n      return date_2 - date_1;\n    });\n  } // sort thời gian gửi lời mời kết bạn từ gần nhất đến xa nhất dùng trong lấy ra request đầu tiên\n\n\n  sortRequestFrist() {\n    this.requestFirstList = this.requestFirstList.sort((dateIn1, dateIn2) => {\n      let date_1 = dateIn1.dateRequest;\n      let date_2 = dateIn2.dateRequest;\n      return date_2 - date_1;\n    });\n  } // sort thời gian mình gửi yêu cầu kết bạn từ gần nhất đến xa nhất dùng trong lấy ra danh sách send\n\n\n  sortSendListDate() {\n    this.sendstList = this.sendstList.sort((dateIn1, dateIn2) => {\n      let date_1 = dateIn1.dateSend;\n      let date_2 = dateIn2.dateSend;\n      return date_2 - date_1;\n    });\n  } // sort thời gian mình gửi yêu cầu kết bạn từ gần nhất đến xa nhất dùng trong lấy ra send đầu tiên\n\n\n  sortSendsFrist() {\n    this.sendFirstList = this.sendFirstList.sort((dateIn1, dateIn2) => {\n      let date_1 = dateIn1.dateSend;\n      let date_2 = dateIn2.dateSend;\n      return date_2 - date_1;\n    });\n  } // sort date A,B,C\n\n\n  sortFriendsListNameABC() {\n    this.friendsList = this.friendsList.sort((nameIn1, nameIn2) => {\n      var x = nameIn1.getNameLast();\n      var y = nameIn2.getNameLast();\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n  } // sort date A,B,C danh sách tìm ra bạn bè đầu tiên\n\n\n  sortFriendsFirstListNameABC() {\n    this.friendFirstList = this.friendFirstList.sort((nameIn1, nameIn2) => {\n      var x = nameIn1.getNameLast();\n      var y = nameIn2.getNameLast();\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n  } // cập nhật trạng thái on - off\n\n\n  update() {\n    var _this = this;\n\n    let loop = 10000; // set biến lặp cho phù hợp để tránh trùng nhau\n\n    this.friendsList != null && this.friendsList.length > 0 ? loop = this.friendsList.length - 1 * 2000 : loop = loop;\n    setTimeout(() => {\n      if (this.friendsList != null) {\n        for (let i = 0; i < this.friendsList.length; i++) {\n          // set time out để bất đồng bộ do server trả về chậm hơi vòng lặp for\n          setTimeout(() => {\n            this.db.database.ref('cai_dat_ws').child(this.friendsList[i].id).on('value', set => {\n              if (set.val().trang_thai_hoat_dong == 'tat') {\n                this.friendsList[i].status = false;\n              } else {\n                // kiểm tra onl web socket\n                this.friendsWS.checkOnline(this.friendsList[i].email); // lấy ra trạng thái từ server\n\n                this.friendsWS.messages_online.subscribe( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator(function* (data) {\n                    let value = yield JSON.parse(JSON.stringify(data));\n                    console.log(_this.friendsList[i].id + \" : \" + value.data.status);\n                    if (value.status == \"success\") _this.friendsList[i].status = value.data.status;else _this.friendsList[i].status = false;\n                  });\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n              }\n            });\n          }, i * 2000);\n        }\n      }\n\n      this.update();\n    }, loop);\n  }\n\n}\n\nFriendsPageWsService.ɵfac = function FriendsPageWsService_Factory(t) {\n  return new (t || FriendsPageWsService)(i0.ɵɵinject(i1.AngularFireDatabase), i0.ɵɵinject(i2.FriendsPageWebSocketService));\n};\n\nFriendsPageWsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FriendsPageWsService,\n  factory: FriendsPageWsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\FrontEnd_ThayLong_Nhom-21\\app-chat\\src\\app\\service\\ws\\friends-page\\friends-page-ws.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AnimationItem } from 'lottie-web';\r\nimport { AnimationOptions } from 'ngx-lottie';\r\nimport { AngularFireDatabase } from '@angular/fire/database';\r\nimport { FriendsPageWebSocketService } from './friends-page-web-socket/friends-page-web-socket.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FriendsPageWsService {\r\n\r\n  private source = new BehaviorSubject(-1);\r\n  public friendsDefault = this.source.asObservable();\r\n  private isLoading: boolean;\r\n  // danh sách yêu cầu đã gửi\r\n  sendstList: any[];\r\n  sizeSends: number;\r\n  sendFirstList: any[];\r\n\r\n  // danh sách lời mời nhận được\r\n  requestList: any[];\r\n  sizeRequest: number;\r\n  requestFirstList: any[];\r\n\r\n  // danh sách bạn bè\r\n  friendsList: any[];\r\n  friendFirstList: any[];\r\n  sizeFriends: number;\r\n  idUnfriend: string = '';\r\n  nameUnfriend: string = '';\r\n\r\n  // danh sách thêm bạn bè\r\n  addList: any[];\r\n  sizeAdd: number;\r\n  searchVal: string ='';\r\n  saveAddList: any[]\r\n\r\n  // đề xuất\r\n  offerList: any[];\r\n  sizeOffer: number;\r\n  searchValOffer: string ='';\r\n  saveOfferList: any[]\r\n  // lottie\r\n  public options: AnimationOptions = {\r\n    path: '/assets/json/lottie/loading.json',\r\n  };\r\n  constructor(private db: AngularFireDatabase, private friendsWS: FriendsPageWebSocketService\r\n  ) {\r\n    this.update()\r\n  }\r\n  selectedFriendsPageDefaultSerivce():void {\r\n    this.source.next(0);\r\n  }\r\n\r\n  selectedRequestService() {\r\n    this.source.next(1);\r\n  }\r\n  \r\n  selectedSendService() {\r\n    this.source.next(2);\r\n  }\r\n\r\n  selectedAddFriendsService() {\r\n    this.source.next(3);\r\n  }\r\n\r\n  selectedOffersFriendsService() {\r\n    this.source.next(4);\r\n  }\r\n\r\n  public isLoadingProcess(): boolean {\r\n    return this.isLoading;\r\n  }\r\n\r\n  public setLoading(loading: boolean): void {\r\n    this.isLoading = loading\r\n  };\r\n\r\n  animationCreated(animationItem: AnimationItem): void {}\r\n  // số lượng bạn bè\r\n  getSizeFriends() {\r\n    return this.sizeFriends;\r\n  }\r\n  setSizeFriends(size: number) {\r\n    this.sizeFriends = size;\r\n  }\r\n  // id người bị hủy kết bạn\r\n  setIDUnFriend(id: string) {\r\n    this.idUnfriend = id;\r\n  }\r\n  getIDUnFriend() {\r\n    return this.idUnfriend\r\n  }\r\n  // tên người bị hủy kết bạn\r\n  setNameUnFriend(name: string) {\r\n    this.nameUnfriend = name;\r\n  }\r\n  getNameUnFriend() {\r\n    return this.nameUnfriend;\r\n  }\r\n\r\n  // danh sách bạn bè\r\n  getFriendsList() {\r\n    return this.friendsList;\r\n  }\r\n  \r\n  // danh sách gửi yêu cầu\r\n   getRequestList() {\r\n    return this.requestList;\r\n  }\r\n  getSizeRequest() {\r\n    return this.sizeRequest;\r\n  }\r\n  setSizeRequest(size: number) {\r\n    this.sizeRequest = size;\r\n  }\r\n  \r\n  // danh sach gửi yêu cầu kết bạn\r\n  getSendsList() {\r\n    return this.sendstList;\r\n  }\r\n  getSizeSends() {\r\n    return this.sizeSends;\r\n  }\r\n  setSizeSends(size: number) {\r\n    this.sizeSends = size;\r\n  }\r\n  // danh sách thêm bạn\r\n  setSizeAdd(size:number) {\r\n    this.sizeAdd = size;\r\n  }\r\n  getSizeAdd() {\r\n    return this.sizeAdd;\r\n  }\r\n\r\n   // danh sách de xuat\r\n   setSizeOffer(size:number) {\r\n    this.sizeOffer = size;\r\n  }\r\n    getSizeOffer() {\r\n    return this.sizeOffer;\r\n  }\r\n\r\n  // sắp xếp danh sách thêm bạn theo thứ tự bạn chung từ nhiều nhất đến ít nhất\r\n  public sortMutualFriendsAdd() {\r\n    this.addList = this.addList.sort((mutual1, mutual2) => {\r\n      let mutualResult_1 = mutual1.mutualFriends;\r\n      let mutualResult_2 = mutual2.mutualFriends;\r\n      return mutualResult_2 - mutualResult_1;\r\n    });\r\n  }\r\n\r\n   // sắp xếp danh sách thêm bạn theo thứ tự bạn chung từ nhiều nhất đến ít nhất\r\n   public sortMutualFriendsOffer() {\r\n    this.offerList = this.offerList.sort((mutual1, mutual2) => {\r\n      let mutualResult_1 = mutual1.mutualFriends;\r\n      let mutualResult_2 = mutual2.mutualFriends;\r\n      return mutualResult_2 - mutualResult_1;\r\n    });\r\n  }\r\n  \r\n   // sort thời gian gửi lời mời kết bạn từ gần nhất đến xa nhất dùng trong lấy ra danh sách request\r\n  public sortRequestListDate() {\r\n    this.requestList = this.requestList.sort((dateIn1, dateIn2) => {\r\n      let date_1 = dateIn1.dateRequest;\r\n      let date_2 = dateIn2.dateRequest;\r\n      return date_2 - date_1;\r\n    });\r\n  }\r\n\r\n   // sort thời gian gửi lời mời kết bạn từ gần nhất đến xa nhất dùng trong lấy ra request đầu tiên\r\n  public sortRequestFrist() {\r\n    this.requestFirstList = this.requestFirstList.sort((dateIn1, dateIn2) => {\r\n      let date_1 = dateIn1.dateRequest;\r\n      let date_2 = dateIn2.dateRequest;\r\n      return date_2 - date_1;\r\n    });\r\n  }\r\n\r\n\r\n   // sort thời gian mình gửi yêu cầu kết bạn từ gần nhất đến xa nhất dùng trong lấy ra danh sách send\r\n   public sortSendListDate() {\r\n    this.sendstList = this.sendstList.sort((dateIn1, dateIn2) => {\r\n      let date_1 = dateIn1.dateSend;\r\n      let date_2 = dateIn2.dateSend;\r\n      return date_2 - date_1;\r\n    });\r\n  }\r\n\r\n   // sort thời gian mình gửi yêu cầu kết bạn từ gần nhất đến xa nhất dùng trong lấy ra send đầu tiên\r\n   public sortSendsFrist() {\r\n    this.sendFirstList = this.sendFirstList.sort((dateIn1, dateIn2) => {\r\n      let date_1 = dateIn1.dateSend;\r\n      let date_2 = dateIn2.dateSend;\r\n      return date_2 - date_1;\r\n    });\r\n  }\r\n\r\n  // sort date A,B,C\r\n  public sortFriendsListNameABC() {\r\n    this.friendsList = this.friendsList.sort((nameIn1, nameIn2) => {\r\n      var x = nameIn1.getNameLast();\r\n      var y = nameIn2.getNameLast();\r\n      return x < y ? -1 : x > y ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  // sort date A,B,C danh sách tìm ra bạn bè đầu tiên\r\n  public sortFriendsFirstListNameABC() {\r\n    this.friendFirstList = this.friendFirstList.sort((nameIn1, nameIn2) => {\r\n      var x = nameIn1.getNameLast();\r\n      var y = nameIn2.getNameLast();\r\n      return x < y ? -1 : x > y ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  // cập nhật trạng thái on - off\r\n  public update(): void {\r\n    let loop = 10000;\r\n    // set biến lặp cho phù hợp để tránh trùng nhau\r\n    this.friendsList != null && this.friendsList.length > 0 ? loop = this.friendsList.length - 1 * 2000 : loop = loop;\r\n    setTimeout(() => {\r\n      if (this.friendsList != null) {\r\n          for (let i = 0; i < this.friendsList.length; i++) {\r\n            // set time out để bất đồng bộ do server trả về chậm hơi vòng lặp for\r\n            setTimeout(() => {\r\n              this.db.database.ref('cai_dat_ws').child(this.friendsList[i].id).on('value', set => {\r\n                if (set.val().trang_thai_hoat_dong == 'tat') {\r\n                  this.friendsList[i].status = false;\r\n                } else {\r\n                  // kiểm tra onl web socket\r\n                  this.friendsWS.checkOnline(this.friendsList[i].email);\r\n                  // lấy ra trạng thái từ server\r\n                  this.friendsWS.messages_online.subscribe(async (data) => {\r\n                    let value = await JSON.parse(JSON.stringify(data));\r\n                    console.log(this.friendsList[i].id + \" : \" + value.data.status);\r\n                    if (value.status == \"success\")\r\n                      this.friendsList[i].status = value.data.status;\r\n\r\n                    else\r\n                      this.friendsList[i].status = false;\r\n                  });\r\n                }\r\n              })\r\n            }, i * 2000);\r\n          }\r\n      }\r\n      this.update();\r\n    }, loop);\r\n  }\r\n  \r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}