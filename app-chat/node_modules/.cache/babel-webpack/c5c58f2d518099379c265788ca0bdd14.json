{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PORT_MAP } from './port-map';\nexport const extendBrokerImplementation = partialBrokerImplementation => ({ ...partialBrokerImplementation,\n  connect: ({\n    call\n  }) => {\n    return /*#__PURE__*/_asyncToGenerator(function* () {\n      const {\n        port1,\n        port2\n      } = new MessageChannel();\n      const portId = yield call('connect', {\n        port: port1\n      }, [port1]);\n      PORT_MAP.set(port2, portId);\n      return port2;\n    });\n  },\n  disconnect: ({\n    call\n  }) => {\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (port) {\n        const portId = PORT_MAP.get(port);\n\n        if (portId === undefined) {\n          throw new Error('The given port is not connected.');\n        }\n\n        yield call('disconnect', {\n          portId\n        });\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  isSupported: ({\n    call\n  }) => {\n    return () => call('isSupported');\n  }\n}); //# sourceMappingURL=extend-broker-implementation.js.map","map":{"version":3,"sources":["E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/broker-factory/build/es2019/helpers/extend-broker-implementation.js"],"names":["PORT_MAP","extendBrokerImplementation","partialBrokerImplementation","connect","call","port1","port2","MessageChannel","portId","port","set","disconnect","get","undefined","Error","isSupported"],"mappings":";AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,OAAO,MAAMC,0BAA0B,GAAIC,2BAAD,KAAkC,EACxE,GAAGA,2BADqE;AAExEC,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AACnB,0CAAO,aAAY;AACf,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmB,IAAIC,cAAJ,EAAzB;AACA,YAAMC,MAAM,SAASJ,IAAI,CAAC,SAAD,EAAY;AAAEK,QAAAA,IAAI,EAAEJ;AAAR,OAAZ,EAA6B,CAACA,KAAD,CAA7B,CAAzB;AACAL,MAAAA,QAAQ,CAACU,GAAT,CAAaJ,KAAb,EAAoBE,MAApB;AACA,aAAOF,KAAP;AACH,KALD;AAMH,GATuE;AAUxEK,EAAAA,UAAU,EAAE,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAc;AACtB;AAAA,oCAAO,WAAOK,IAAP,EAAgB;AACnB,cAAMD,MAAM,GAAGR,QAAQ,CAACY,GAAT,CAAaH,IAAb,CAAf;;AACA,YAAID,MAAM,KAAKK,SAAf,EAA0B;AACtB,gBAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,cAAMV,IAAI,CAAC,YAAD,EAAe;AAAEI,UAAAA;AAAF,SAAf,CAAV;AACH,OAND;;AAAA;AAAA;AAAA;AAAA;AAOH,GAlBuE;AAmBxEO,EAAAA,WAAW,EAAE,CAAC;AAAEX,IAAAA;AAAF,GAAD,KAAc;AACvB,WAAO,MAAMA,IAAI,CAAC,aAAD,CAAjB;AACH;AArBuE,CAAlC,CAAnC,C,CAuBP","sourcesContent":["import { PORT_MAP } from './port-map';\r\nexport const extendBrokerImplementation = (partialBrokerImplementation) => ({\r\n    ...partialBrokerImplementation,\r\n    connect: ({ call }) => {\r\n        return async () => {\r\n            const { port1, port2 } = new MessageChannel();\r\n            const portId = await call('connect', { port: port1 }, [port1]);\r\n            PORT_MAP.set(port2, portId);\r\n            return port2;\r\n        };\r\n    },\r\n    disconnect: ({ call }) => {\r\n        return async (port) => {\r\n            const portId = PORT_MAP.get(port);\r\n            if (portId === undefined) {\r\n                throw new Error('The given port is not connected.');\r\n            }\r\n            await call('disconnect', { portId });\r\n        };\r\n    },\r\n    isSupported: ({ call }) => {\r\n        return () => call('isSupported');\r\n    }\r\n});\r\n//# sourceMappingURL=extend-broker-implementation.js.map"]},"metadata":{},"sourceType":"module"}