{"ast":null,"code":"import _asyncToGenerator from \"E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n\n    const createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (proxy, nativeOfflineAudioContext, trace) {\n        let nativeStereoPannerNode = getNativeAudioNode(proxy);\n        /*\r\n         * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\r\n         * again.\r\n         */\n\n        const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          const options = {\n            channelCount: nativeStereoPannerNode.channelCount,\n            channelCountMode: nativeStereoPannerNode.channelCountMode,\n            channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n            pan: nativeStereoPannerNode.pan.value\n          };\n          nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n        }\n\n        renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n        if (!nativeStereoPannerNodeIsOwnedByContext) {\n          yield renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n        } else {\n          yield connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\n        }\n\n        if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\n        } else {\n          yield renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\n        }\n\n        return nativeStereoPannerNode;\n      });\n\n      return function createStereoPannerNode(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render(proxy, nativeOfflineAudioContext, trace) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\n      }\n\n    };\n  };\n}; //# sourceMappingURL=stereo-panner-node-renderer-factory.js.map","map":{"version":3,"sources":["E:/Important/FIT/project-front-end/FrontEnd_ThayLong_Nhom-21/app-chat/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js"],"names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","trace","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"mappings":";AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,MAAMC,qCAAqC,GAAG,CAACC,iBAAD,EAAoBC,4BAApB,EAAkDC,kBAAlD,EAAsEC,gBAAtE,EAAwFC,uBAAxF,KAAoH;AACrK,SAAO,MAAM;AACT,UAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;AACA,UAAMC,sBAAsB;AAAA,mCAAG,WAAOC,KAAP,EAAcC,yBAAd,EAAyCC,KAAzC,EAAmD;AAC9E,YAAIC,sBAAsB,GAAGT,kBAAkB,CAACM,KAAD,CAA/C;AACA;AACZ;AACA;AACA;;AACY,cAAMI,sCAAsC,GAAGd,gBAAgB,CAACa,sBAAD,EAAyBF,yBAAzB,CAA/D;;AACA,YAAI,CAACG,sCAAL,EAA6C;AACzC,gBAAMC,OAAO,GAAG;AACZC,YAAAA,YAAY,EAAEH,sBAAsB,CAACG,YADzB;AAEZC,YAAAA,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;AAGZC,YAAAA,qBAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;AAIZC,YAAAA,GAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;AAJpB,WAAhB;AAMAP,UAAAA,sBAAsB,GAAGV,4BAA4B,CAACQ,yBAAD,EAA4BI,OAA5B,CAArD;AACH;;AACDR,QAAAA,+BAA+B,CAACc,GAAhC,CAAoCV,yBAApC,EAA+DE,sBAA/D;;AACA,YAAI,CAACC,sCAAL,EAA6C;AACzC,gBAAMT,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACS,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,EAAmEP,KAAnE,CAAtB;AACH,SAFD,MAGK;AACD,gBAAMV,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACS,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,EAAmEP,KAAnE,CAAvB;AACH;;AACD,YAAIb,sBAAsB,CAACc,sBAAD,CAA1B,EAAoD;AAChD,gBAAMP,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,EAAqEV,KAArE,CAA7B;AACH,SAFD,MAGK;AACD,gBAAMN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCE,sBAAnC,EAA2DD,KAA3D,CAA7B;AACH;;AACD,eAAOC,sBAAP;AACH,OA9B2B;;AAAA,sBAAtBJ,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AA+BA,WAAO;AACHc,MAAAA,MAAM,CAACb,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,EAA0C;AAC5C,cAAMY,8BAA8B,GAAGjB,+BAA+B,CAACkB,GAAhC,CAAoCd,yBAApC,CAAvC;;AACA,YAAIa,8BAA8B,KAAKE,SAAvC,EAAkD;AAC9C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;AACH;;AACD,eAAOf,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,EAAmCC,KAAnC,CAA7B;AACH;;AAPE,KAAP;AASH,GA1CD;AA2CH,CA5CM,C,CA6CP","sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\r\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\r\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\r\n    return () => {\r\n        const renderedNativeStereoPannerNodes = new WeakMap();\r\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {\r\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\r\n            /*\r\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\r\n             * again.\r\n             */\r\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\r\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\r\n                const options = {\r\n                    channelCount: nativeStereoPannerNode.channelCount,\r\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\r\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\r\n                    pan: nativeStereoPannerNode.pan.value\r\n                };\r\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\r\n            }\r\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\r\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\r\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\r\n            }\r\n            else {\r\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);\r\n            }\r\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);\r\n            }\r\n            else {\r\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);\r\n            }\r\n            return nativeStereoPannerNode;\r\n        };\r\n        return {\r\n            render(proxy, nativeOfflineAudioContext, trace) {\r\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\r\n                if (renderedNativeStereoPannerNode !== undefined) {\r\n                    return Promise.resolve(renderedNativeStereoPannerNode);\r\n                }\r\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);\r\n            }\r\n        };\r\n    };\r\n};\r\n//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map"]},"metadata":{},"sourceType":"module"}