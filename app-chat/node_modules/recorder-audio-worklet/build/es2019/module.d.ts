import { TAudioWorkletNodeConstructor, TContext, TNativeAudioWorkletNodeConstructor, TNativeContext } from 'standardized-audio-context';
import { isSupported } from 'worker-factory';
import { INativeRecorderAudioWorkletNode, IRecorderAudioWorkletNode } from './interfaces';
import { TAnyRecorderAudioWorkletNodeOptions } from './types';
export * from './interfaces/index';
export * from './types/index';
export declare const addRecorderAudioWorkletModule: (addAudioWorkletModule: (url: string) => Promise<void>) => Promise<void>;
export declare function createRecorderAudioWorkletNode<T extends TContext | TNativeContext>(audioWorkletNodeConstructor: T extends TContext ? TAudioWorkletNodeConstructor : TNativeAudioWorkletNodeConstructor, context: T, options?: Partial<TAnyRecorderAudioWorkletNodeOptions<T>>): T extends TContext ? IRecorderAudioWorkletNode<T> : INativeRecorderAudioWorkletNode;
export { isSupported };
//# sourceMappingURL=module.d.ts.map