{"version":3,"file":"remote-config.d.ts","sources":["remote-config.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { InjectionToken, NgZone } from '@angular/core';\r\nimport { MonoTypeOperatorFunction, Observable, OperatorFunction } from 'rxjs';\r\nimport { FirebaseAppConfig, FirebaseOptions, ɵPromiseProxy } from '@angular/fire';\r\nimport firebase from 'firebase/app';\r\nimport { Settings } from './interfaces';\r\nexport interface ConfigTemplate {\r\n    [key: string]: string | number | boolean;\r\n}\r\nexport declare const SETTINGS: InjectionToken<firebase.remoteConfig.Settings>;\r\nexport declare const DEFAULTS: InjectionToken<ConfigTemplate>;\r\nexport interface AngularFireRemoteConfig extends ɵPromiseProxy<firebase.remoteConfig.RemoteConfig> {\r\n}\r\nexport declare class Value implements firebase.remoteConfig.Value {\r\n    _source: firebase.remoteConfig.ValueSource;\r\n    _value: string;\r\n    asBoolean(): boolean;\r\n    asString(): string;\r\n    asNumber(): number;\r\n    getSource(): firebase.remoteConfig.ValueSource;\r\n    constructor(_source: firebase.remoteConfig.ValueSource, _value: string);\r\n}\r\nexport declare class Parameter extends Value {\r\n    key: string;\r\n    fetchTimeMillis: number;\r\n    constructor(key: string, fetchTimeMillis: number, source: firebase.remoteConfig.ValueSource, value: string);\r\n}\r\nexport declare const filterRemote: () => MonoTypeOperatorFunction<Parameter | Parameter[]>;\r\nexport declare const filterFresh: (howRecentInMillis: number) => MonoTypeOperatorFunction<Parameter | Parameter[]>;\r\nexport declare class AngularFireRemoteConfig {\r\n    private zone;\r\n    readonly changes: Observable<Parameter>;\r\n    readonly parameters: Observable<Parameter[]>;\r\n    readonly numbers: Observable<{\r\n        [key: string]: number | undefined;\r\n    }> & {\r\n        [key: string]: Observable<number>;\r\n    };\r\n    readonly booleans: Observable<{\r\n        [key: string]: boolean | undefined;\r\n    }> & {\r\n        [key: string]: Observable<boolean>;\r\n    };\r\n    readonly strings: Observable<{\r\n        [key: string]: string | undefined;\r\n    }> & {\r\n        [key: string]: Observable<string | undefined>;\r\n    };\r\n    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, settings: Settings | null, defaultConfig: ConfigTemplate | null, zone: NgZone, platformId: Object);\r\n}\r\nexport declare const budget: <T>(interval: number) => MonoTypeOperatorFunction<T>;\r\nexport declare function scanToObject(): OperatorFunction<Parameter, {\r\n    [key: string]: string | undefined;\r\n}>;\r\nexport declare function scanToObject(to: 'numbers'): OperatorFunction<Parameter, {\r\n    [key: string]: number | undefined;\r\n}>;\r\nexport declare function scanToObject(to: 'booleans'): OperatorFunction<Parameter, {\r\n    [key: string]: boolean | undefined;\r\n}>;\r\nexport declare function scanToObject(to: 'strings'): OperatorFunction<Parameter, {\r\n    [key: string]: string | undefined;\r\n}>;\r\nexport declare function scanToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter, T & {\r\n    [key: string]: string | undefined;\r\n}>;\r\nexport declare function mapToObject(): OperatorFunction<Parameter[], {\r\n    [key: string]: string | undefined;\r\n}>;\r\nexport declare function mapToObject(to: 'numbers'): OperatorFunction<Parameter[], {\r\n    [key: string]: number | undefined;\r\n}>;\r\nexport declare function mapToObject(to: 'booleans'): OperatorFunction<Parameter[], {\r\n    [key: string]: boolean | undefined;\r\n}>;\r\nexport declare function mapToObject(to: 'strings'): OperatorFunction<Parameter[], {\r\n    [key: string]: string | undefined;\r\n}>;\r\nexport declare function mapToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter[], T & {\r\n    [key: string]: string | undefined;\r\n}>;\r\n"]}