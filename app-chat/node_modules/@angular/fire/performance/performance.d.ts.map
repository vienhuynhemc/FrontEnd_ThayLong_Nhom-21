{"version":3,"file":"performance.d.ts","sources":["performance.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { InjectionToken, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport firebase from 'firebase/app';\r\nimport { FirebaseApp, ɵPromiseProxy } from '@angular/fire';\r\nexport declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;\r\nexport declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;\r\nexport declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;\r\nexport interface AngularFirePerformance extends ɵPromiseProxy<firebase.performance.Performance> {\r\n}\r\nexport declare class AngularFirePerformance {\r\n    private zone;\r\n    private readonly performance;\r\n    constructor(app: FirebaseApp, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, zone: NgZone, platformId: Object);\r\n}\r\nexport declare const traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: {\r\n    orComplete?: boolean;\r\n}) => (source$: Observable<T>) => Observable<T>;\r\nexport declare const traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: {\r\n    orComplete?: boolean;\r\n}) => (source$: Observable<T>) => Observable<T>;\r\nexport declare const traceUntilComplete: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\r\nexport declare const traceUntilFirst: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\r\nexport declare const trace: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\r\n"]}